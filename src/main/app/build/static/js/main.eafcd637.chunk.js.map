{"version":3,"sources":["components/Page.js","components/ticker-details/ticker-details.js","components/home/home.js","components/not-found/not-found.js","App.js","serviceWorker.js","index.js"],"names":["Page","_ref","header","children","react_default","a","createElement","className","TickerDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","ticker","sendMessage","bind","assertThisInitialized","handleData","onOpen","message","refWebSocket","data","result","JSON","parse","setState","_this2","react","build_default","url","onMessage","reconnect","debug","ref","Websocket","es","columns","Header","accessor","defaultPageSize","expanded","onExpandedChange","Component","Home","tickers","console","log","components_Page","SubComponent","original","ticker_details","row","NotFound","react_router_dom","to","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eafcd637.chunk.js","sourcesContent":["import React from 'react'\n\nconst Page = ({header, children}) =>\n    <div className=\"App\">\n        <header className=\"App-header\">\n            {header && <h1>{header}</h1>}\n            {children}\n        </header>\n    </div>\n\nexport default Page\n","import React, {Component, Fragment} from 'react'\n\nimport Websocket from 'react-websocket';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nclass TickerDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            ticker: []\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleData = this.handleData.bind(this);\n        this.onOpen = this.onOpen.bind(this);\n    }\n\n    sendMessage(message) {\n        this.refWebSocket.sendMessage(message);\n    }\n\n    onOpen() {\n        this.sendMessage('DRILL_TICKER ' + this.props.ticker);\n    }\n\n    handleData(data) {\n        let result = JSON.parse(data);\n        this.setState({count: result.count, ticker: result.data});\n    }\n\n    render() {\n        const {ticker} = this.state;\n\n        const columns = [\n            {\n                Header: 'Records',\n                columns: [\n                    {\n                        Header: 'ID',\n                        accessor: 'id'\n                    },\n                    {\n                        Header: 'Time',\n                        accessor: 'time'\n                    },\n                    {\n                        Header: 'Symbol',\n                        accessor: 'symbol'\n                    },\n                    {\n                        Header: 'Quantity',\n                        accessor: 'quantity'\n                    },\n                    {\n                        Header: 'Price',\n                        accessor: 'price'\n                    }\n                ]\n            }\n        ];\n\n        return <Fragment>\n            <span>{this.props.ticker} has {this.state.count} records</span>\n            <Websocket url='ws://localhost:9999/trades' onOpen={this.onOpen}\n                       onMessage={this.handleData}\n                       reconnect={true} debug={true}\n                       ref={Websocket => {\n                           this.refWebSocket = Websocket;\n                       }}/>\n            <ReactTable\n                data={ticker}\n                columns={columns}\n                defaultPageSize={10}\n                expanded={this.state.expanded}\n                onExpandedChange={expanded => this.setState({expanded})}\n                className=\"-striped -highlight\"\n            />\n        </Fragment>\n    }\n}\n\nexport default TickerDetails;\n","import React, {Component} from 'react'\n\nimport Page from '../Page'\nimport Websocket from 'react-websocket';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport TickerDetails from '../ticker-details';\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tickers: [],\n            expanded: {}\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleData = this.handleData.bind(this);\n        this.onOpen = this.onOpen.bind(this);\n    }\n\n    sendMessage(message) {\n        this.refWebSocket.sendMessage(message);\n    }\n\n    onOpen() {\n        this.sendMessage('LOAD_TICKERS')\n    }\n\n    handleData(data) {\n        console.log(data);\n        let result = JSON.parse(data);\n        this.setState({tickers: result.tickers});\n    }\n\n    render() {\n        const {tickers} = this.state;\n\n        const columns = [\n            {\n                Header: 'Tickers',\n                columns: [\n                    {\n                        Header: 'Ticker Name',\n                        accessor: 'ticker'\n                    }\n                ]\n            }\n        ];\n        return <Page header=\"Real-time Trades\">\n            <ReactTable\n                data={tickers}\n                columns={columns}\n                defaultPageSize={10}\n                expanded={this.state.expanded}\n                onExpandedChange={expanded => this.setState({expanded})}\n                className=\"-striped -highlight\"\n                SubComponent={original => <TickerDetails ticker={original.row.ticker}/>}\n            />\n\n            <Websocket url='ws://localhost:9999/trades' onOpen={this.onOpen}\n                       onMessage={this.handleData}\n                       reconnect={true} debug={true}\n                       ref={Websocket => {\n                           this.refWebSocket = Websocket;\n                       }}/>\n        </Page>;\n    }\n}\n\nexport default Home\n","import React    from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport Page     from '../Page'\n\nconst NotFound = () => (\n    <Page header=\"Not Found\">\n        <span><Link className=\"App-link\" to=\"/\">Home</Link></span>\n    </Page>\n)\n\nexport default NotFound\n","import React             from 'react'\n\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Home              from './components/home'\nimport NotFound          from './components/not-found'\n\nimport './App.css'\n\nconst App = () => (\n    <Switch>\n        <Route exact path='/index.html'>\n            <Redirect to=\"/\"/>\n        </Route>\n        <Route exact path='/'                component={Home}    />\n        <Route                               component={NotFound}/>\n    </Switch>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React                    from 'react'\nimport ReactDOM                 from 'react-dom'\n\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport App                      from './App'\n\nimport * as serviceWorker       from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route component={App}/>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}